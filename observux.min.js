!function(e,r){if("object"==typeof module&&module.exports){var t={Observable:require("rxjs/Observable").Observable,BehaviorSubject:require("rxjs/BehaviorSubject").BehaviorSubject};require("rxjs/add/observable/combineLatest"),module.exports=r(t)}else"function"==typeof define&&define.amd?define(["rxjs"],r):e.Observux=r(e.Rx)}(this,function(e){"use strict";return{Store:function(r){var t=this;if(null===r||"object"!=typeof r)throw new TypeError("Store props must be an object, got "+r);var n=Object.keys(r);if(0===n.length)throw new RangeError("Cannot create a store without props");if(n.indexOf("state")>=0)throw new TypeError('Cannot assign reserved prop name "state"');var o=n.map(function(n){var o=new e.BehaviorSubject(r[n]);return Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:function(){return o.value},set:function(e){o.next(e)}}),o});Object.defineProperty(t,"state",{configurable:!1,enumerable:!1,writable:!1,value:e.Observable.combineLatest(o,function(){return Object.keys(t).reduce(function(e,r){return e[r]=t[r],e},{})})})}}});
//# sourceMappingURL=observux.min.js.map